plugins {
    id 'war'
    id "com.github.node-gradle.node" version "3.0.1"
    id 'com.diffplug.spotless' version '6.25.0'

    // IntelliJ IDEA plugin here to allow integration tests to appear properly in IDEs.
    id 'idea'
    id 'jacoco'
    id 'org.jetbrains.dokka' version '1.6.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

sourceCompatibility = '11'

dependencies {
    implementation 'com.opencsv:opencsv:[5.9,6.0)'
    implementation 'org.freemarker:freemarker:[2.3.31,2.4.0)'
    implementation 'org.apache.commons:commons-configuration2:[2.8.0,3.0.0)'
    implementation 'org.apache.commons:commons-lang3:[3.11,4.0)'
    implementation 'commons-fileupload:commons-fileupload:1.5'

    implementation 'org.opencadc:cadc-access-control:[1.1.27,1.2.0)'
    implementation 'org.opencadc:cadc-access-control-identity:[1.1.0,)'
    implementation 'org.opencadc:cadc-log:[1.1.7,2.0)'
    implementation 'org.opencadc:cadc-vos:[2.0.1,3.0)'
    implementation 'org.opencadc:cadc-vos-client:[2.0.4,3.0)'
    implementation 'org.opencadc:cadc-vos-server:[2.0.14,3.0)'
    implementation 'org.opencadc:cadc-vosi:[1.3.12,2.0.0)'
    implementation 'org.opencadc:cadc-registry:[1.7.6,2.0)'
    implementation 'org.opencadc:cadc-util:[1.10.0,2.0)'

    // Include json-smart dependency here to deal with vulnerability CVS-2024-57699
    // https://avd.aquasec.com/nvd/cve-2024-57699
    //
    implementation 'net.minidev:json-smart:[2.5.2,2.6.0)'

    implementation 'org.opencadc:cadc-web-token:[1.0.2,2.0.0)'
    implementation 'org.opencadc:cadc-web-util:[1.2.11,2.0.0)'

    implementation 'org.restlet:org.restlet:2.5.1'
    implementation 'org.restlet:org.restlet.ext.servlet:2.5.1'
    implementation 'org.restlet:org.restlet.ext.freemarker:2.5.1'
    implementation 'org.restlet:org.restlet.ext.json:2.5.1'

    testImplementation 'junit:junit:[4.12,5.0)'
    testImplementation 'org.xmlunit:xmlunit-core:2.10.0'
    testImplementation 'org.xmlunit:xmlunit-assertj:2.10.0'
    testImplementation 'org.opencadc:cadc-web-test:[2.1.0,3.0.0)'
    testImplementation 'org.mockito:mockito-core:[3.9.0,4.0.0)'
    testImplementation 'org.seleniumhq.selenium:selenium-java:[3.14,4.0)'
}

spotless {
    // optional: only format files which have changed since origin/main
    ratchetFrom 'origin/main'

    java {
        // Pass spotless:on or spotless:off
        toggleOffOn()

        // Use the default importOrder configuration
        importOrder()
        // Remove unused imports
        removeUnusedImports()
        // Google Java Format, Android Open Source Project style which uses 4 spaces for indentation
        palantirJavaFormat('2.50.0').formatJavadoc(true)
        // Format annotations on a single line
        formatAnnotations()
    }
    format 'misc', {
        target '*.gradle'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}
check.dependsOn spotlessCheck

// Create Java Code Coverage Reports
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
check.dependsOn jacocoTestReport

// Create JavaDoc
javadoc {
    destinationDir = file("${layout.buildDirectory}/docs/javadoc")
}

// Create Java Documentation using Dokka for Github Markdown and HTML
tasks.dokkaGfm.configure {
    outputDirectory.set(file("${layout.buildDirectory}/docs/dokka/gfm"))
    dokkaSourceSets {
        register("main") {
            sourceRoots.from(file("src/main/java"))
        }
    }
}

tasks.dokkaHtml.configure {
    outputDirectory.set(file("${layout.buildDirectory}/docs/dokka/html"))
    dokkaSourceSets {
        register("main") {
            sourceRoots.from(file("src/main/java"))
        }
        configureEach {
            jdkVersion.set(11)
            sourceLink {
                localDirectory.set(file("src/main/java"))
                remoteUrl.set("https://github.com/opencadc/storage-ui/tree/main/src/main/java")
            }
        }
    }
}


war {
    archiveFileName = 'storage.war'
}

ext {
    // VOSpace service values. Change alt_vospace_service if necessary
    // to match a configured service in org.opencadc.vosui.properties
    intTest_default_vospace_service = 'vault'
}

sourceSets {
    intTest
}

configurations {
    intTestImplementation
    intTestImplementation.extendsFrom(testImplementation)
}

idea {
    module {
        // add integration test dir
        testSourceDirs += file('src/intTest/java')
    }
}

['firefox', 'chrome'].each { driver ->
    tasks.register("intTest${driver.capitalize()}", Test) { driverTest ->
        testClassesDirs = sourceSets.intTest.output.classesDirs
        classpath = sourceSets.intTest.runtimeClasspath
        reports {
            html.outputLocation = reporting.file("$name/html")
        }
        dependencies {
            intTestImplementation 'junit:junit:[4.12,5.0)'
            intTestImplementation 'org.opencadc:cadc-web-test:[2.1.1,3.0.0)'
            intTestImplementation 'org.seleniumhq.selenium:selenium-java:[3.14,4.0)'
        }

        systemProperty "driver", "${driver}"

        if (!project.hasProperty('intTest_selenium_server_url')) {
            systemProperty 'selenium.server.url', 'http://mach378.cadc.dao.nrc.ca:4444'
        }
        else {
            systemProperty 'selenium.server.url', project.intTest_selenium_server_url
            logger.info('Running browser tests on ' + project.intTest_selenium_server_url)
        }

        if (!project.hasProperty('intTest_web_app_url')) {
            System.err.println("Please set the intTest_web_app_url property (-PintTest_web_app_url=https://www...).")
        } else {
            systemProperty 'web.app.url', project.intTest_web_app_url
        }

        if (!project.hasProperty('intTest_resource_id')) {
            System.err.println("Please set the intTest_resource_id property (-PintTest_resource_id=ivo://...).")
        } else {
            systemProperty 'resource.id', project.intTest_resource_id
        }

        if (!project.hasProperty('intTest_user_name')) {
            System.err.println("Please set the intTest_user_name property (-PintTest_user_name=cadcuser).")
        } else {
            systemProperty 'user.name', project.intTest_user_name
        }

        if (!project.hasProperty('intTest_home_root')) {
            System.err.println("Using default home.root (-PintTest_home_root=/ for vault, or -PintTest_home_root=/home for cavern).  Default is / (vault).")
        } else {
            systemProperty 'home.root', project.intTest_home_root
        }

        if (!project.hasProperty('intTest_user_password')) {
            System.err.println("Please set the intTest_user_password property (-PintTest_user_password=1234pw).")
        } else {
            systemProperty 'user.password', project.intTest_user_password
        }

        if (project.hasProperty('intTest_test_directory_name')) {
            systemProperty 'test.directory.name', project.intTest_test_directory_name
        } else {
            logger.info("Using " + System.getProperty("user.name") + " as the test directory.")
        }

        if (project.hasProperty('intTest_alt_home_directory')) {
            systemProperty 'test.alt_home_directory', project.intTest_alt_home_directory
        } else {
            logger.info("Using default home directory in arc.")
        }

        systemProperty 'test.default_vospace', project.intTest_default_vospace_service

        if (project.hasProperty('intTest_alt_vospace_service')) {
            systemProperty 'test.alt_vospace', project.intTest_alt_vospace_service
        } else {
            logger.info("No alternate VOSpace backend configured.")
        }

        // This needs to be explicitly transferred.  Unclear why.
        // jenkinsd 2024.01.25
        //
        systemProperty 'ca.nrc.cadc.reg.client.RegistryClient.host', System.getProperty('ca.nrc.cadc.reg.client.RegistryClient.host')

        maxParallelForks = 1
    }
}
